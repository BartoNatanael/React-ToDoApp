{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleDate","e","setState","target","value","handleText","handleChecked","handleClick","console","log","length","props","add","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","fontSize","App","counter","deleteTask","changeTaskStatus","Array","from","forEach","getTime","prevState","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b18d47a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n    \r\n    minDate = new Date().toISOString().slice(0,10)\r\n    state = { \r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n     }\r\n\r\n    handleDate = (e) => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n    handleChecked = (e) => {\r\n        this.setState({\r\n            checked: !this.state.checked\r\n        })\r\n    }\r\n    handleClick = () => {\r\n        console.log('dodany obiekt')\r\n        const {text, checked, date} = this.state\r\n        if(text.length > 2){\r\n        const add = this.props.add(text, date, checked)\r\n        if(add){\r\n            this.setState({\r\n                text: '',\r\n                checked: false,\r\n                date: this.minDate\r\n            })}\r\n        }else{\r\n            console.log('To short')\r\n        }\r\n      }\r\n    \r\n    render() {\r\n        let maxDate = this.minDate.slice(0,4) * 1 + 1 \r\n        maxDate = maxDate +\"-12-31\"\r\n\r\n        return ( \r\n            <div className='form'>\r\n                <input type=\"text\" placeholder='Add tast' value={this.state.text} onChange={this.handleText}/><br/>\r\n                <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleChecked}/>\r\n                <label htmlFor=\"important\">Set priority</label>\r\n                <br/>\r\n                <label htmlFor=\"date\">Set deadline: </label>\r\n                <input type=\"date\" id=\"date\" value={this.state.date}\r\n                min={this.minDate}max={maxDate} onChange={this.handleDate}/>\r\n                <br/>\r\n                <button onClick={this.handleClick}>Add!</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n\r\n    const style = {\r\n        color: '#ff6961',\r\n    }\r\n    const {text, date, id, active, important, finishDate} = props.task;\r\n    if(active){\r\n        return ( \r\n        <div>\r\n            <p>\r\n        <strong style={important ? style : null}>{text}</strong> <br/> deadline <span>{date} </span>\r\n        <button onClick={() =>props.change(id)}>DONE</button>\r\n        <button onClick={() => props.delete(id)} className='secondBtn'>X</button>\r\n            </p>\r\n        </div> \r\n    );} else {\r\n        const finish = new Date(finishDate).toLocaleString()\r\n        return (\r\n            <div>\r\n                <p>\r\n        <strong >{text}</strong>  <em>(deadline <span>{date} </span>)</em>\r\n        <br/>\r\n        - task done on <span>{finish}</span>\r\n        <button onClick={() => props.delete(id)} className='secondBtn'>X</button>\r\n            </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    // const tasks =props.tasks.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n\r\n    const active = props.tasks.filter(task => task.active)\r\n\r\n    const done = props.tasks.filter(task => !task.active)\r\n\r\n    if(done.length>=2){\r\n    done.sort((a, b) =>{\r\n        return b.finishDate - a.finishDate\r\n    })}\r\n\r\n    if(active.length>=2){\r\n        active.sort((a,b) => {\r\n\r\n            a = a.text.toLowerCase()\r\n            b = b.text.toLowerCase()\r\n\r\n            if(a < b) return -1\r\n            if(a > b) return 1\r\n            return 0\r\n        })\r\n    }\r\n\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n\r\n    return (\r\n        <div className=\"flex\">\r\n        <div className='active'>\r\n            <h1>Tasks to do: ({activeTasks.length})</h1>\r\n            {activeTasks.length > 0 ? activeTasks : <p>No tasks to do, you are happy man!</p>}\r\n        </div>\r\n        \r\n        <div className=\"done\">\r\n            <h1>Finished tasks: ({doneTasks.length})</h1>\r\n            {done.length> 5 &&<span style={{fontSize: '10px'}}>Only 5 last tasks are being shown</span>}\r\n            {doneTasks.slice(0,5)}\r\n        </div>\r\n        </div> \r\n     );\r\n}\r\n \r\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\nclass App extends Component {\n\n  counter = 7\n  state = { \n    tasks:[\n      {\n        id: 0,\n        text: 'Finally play Witcher 3',\n        date: \"2020-05-12\",\n        important: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 1,\n        text: 'Drink beer with friends',\n        date: \"2020-05-12\",\n        important: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 2,\n        text: 'Go to park for walk',\n        date: \"2020-05-12\",\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 3,\n        text: 'Eat pasta',\n        date: \"2020-05-12\",\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 4,\n        text: 'Go to Biedronka',\n        date: \"2020-05-12\",\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 5,\n        text: 'Go cycling',\n        date: \"2020-05-12\",\n        important: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 6,\n        text: 'Make the bed',\n        date: \"2020-05-12\",\n        important: true,\n        active: true,\n        finishDate: null\n      }\n    ]\n   }\n\n  deleteTask = (id) => {\n    // console.log('delete' + id)\n    // const tasks = [...this.state.tasks];\n    // console.log(tasks)\n    // const index = tasks.findIndex(task => task.id===id)\n    // tasks.splice(index, 1)\n    // console.log(tasks)\n\n    // this.setState({\n    //   tasks\n    // })\n\n    let tasks = [...this.state.tasks]\n    tasks = tasks.filter(task => task.id!==id)\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    console.log('done' + id)\n    const tasks = Array.from(this.state.tasks)\n    tasks.forEach(task => {\n      if(task.id ===id){\n        task.active = false\n        task.finishDate = new Date().getTime()\n      }\n      this.setState({\n        tasks\n      })\n    })\n  }\n  AddTask = (text, date, important) => {\n    const task = {\n        id: this.counter++,\n        text, //tekst z inputa\n        date, //tekst z inputa\n        important, //wartość z inputa\n        active: true,\n        finishDate: null\n    }\n    // this.counter++\n    console.log(task, this.counter)\n    this.setState(prevState => ({\n      tasks: this.state.tasks.concat(task)\n    }))\n    return true\n  }\n\n  render() { \n    return ( \n    <div className=\"App\">\n      <h1>To Do App</h1>\n      <AddTask add={this.AddTask}/>\n      \n      <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus}/>\n    </div> )\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}